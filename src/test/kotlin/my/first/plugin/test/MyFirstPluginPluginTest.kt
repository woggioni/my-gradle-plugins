/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package my.first.plugin.test

import my.first.plugin.installResource
import org.gradle.testfixtures.ProjectBuilder
import org.gradle.testkit.runner.GradleRunner
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.io.TempDir
import java.io.File
import java.net.URLClassLoader
import java.nio.file.Path


/**
 * A simple unit test for the 'my.first.plugin.greeting' plugin.
 */
class MyFirstPluginPluginTest {

    @TempDir
    lateinit var testProjectDir : Path
    lateinit var buildFile : Path

    @BeforeEach
    fun setup() {
        buildFile = testProjectDir.resolve("build.gradle.kts")
    }

    fun getStandardGradleRunnerFor(taskName: String): GradleRunner {
        return GradleRunner.create()
                .withDebug(true)
                .withProjectDir(testProjectDir.toFile())
                .withArguments(taskName, "-s", "--info", "-g", System.getProperty("test.gradle.user.home", "."))
                .withPluginClasspath()
    }

    @Test
    fun fooKotlin() {
        installResource("build.gradle.kts", testProjectDir)
        installResource("settings.gradle.kts", testProjectDir)
        installResource("gradle.properties", testProjectDir)
        val runner = getStandardGradleRunnerFor("hello")
        val result = runner.build()
        println(result.output)
    }

    @Test
    fun fooGroovy() {
        installResource("build.gradle", testProjectDir)
        installResource("settings.gradle.kts", testProjectDir)
        installResource("gradle.properties", testProjectDir)
        val runner = getStandardGradleRunnerFor("hello")
        val result = runner.build()
        println(result.output)
    }

//    @Test
//    fun `plugin registers task`() {
//        // Create a test project and apply the plugin
//        val project = ProjectBuilder.builder().build()
//        project.plugins.apply("my.first.plugin.MyFirstPlugin")
//
//        // Verify the result
//        val task = project.tasks.findByName("hello")!!
//        println(task.outputs.hasOutput)
//    }
}
